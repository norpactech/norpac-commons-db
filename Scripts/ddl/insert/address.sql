-- ---------------------------------------------------------------------------------------
-- Insert: norpac_commons.address. Generated by Pareto Factoryâ„¢ "Be Consistent"
-- ---------------------------------------------------------------------------------------

DROP FUNCTION IF EXISTS norpac_commons.i_address;
CREATE FUNCTION norpac_commons.i_address(
  IN p_id_rt_address_status UUID, 
  IN p_address_line1 VARCHAR, 
  IN p_address_line2 VARCHAR, 
  IN p_locality VARCHAR, 
  IN p_admin_area_level1 VARCHAR, 
  IN p_admin_area_level2 VARCHAR, 
  IN p_postal_code VARCHAR, 
  IN p_country_code CHAR, 
  IN p_latitude DECIMAL, 
  IN p_longitude DECIMAL, 
  IN p_validated_at TIMESTAMP, 
  IN p_validated_by VARCHAR, 
  IN p_validation_notes TEXT, 
  IN p_created_by VARCHAR
)
RETURNS norpac_commons.pg_resp
AS $$
DECLARE

  c_service_name TEXT := 'i_address';

  v_metadata     JSONB := '{}'::JSONB;
  v_errors       JSONB := '[]'::JSONB;
  v_val_resp     norpac_commons.pg_val;  
  v_response     norpac_commons.pg_resp;
  v_updated_at   TIMESTAMP;
  
  -- Primary Key Field(s)
  v_id uuid := NULL;

BEGIN

  -- ------------------------------------------------------
  -- Metadata
  -- ------------------------------------------------------

  v_metadata := jsonb_build_object(
    'id_rt_address_status', p_id_rt_address_status, 
    'address_line1', p_address_line1, 
    'address_line2', p_address_line2, 
    'locality', p_locality, 
    'admin_area_level1', p_admin_area_level1, 
    'admin_area_level2', p_admin_area_level2, 
    'postal_code', p_postal_code, 
    'country_code', p_country_code, 
    'latitude', p_latitude, 
    'longitude', p_longitude, 
    'validated_at', p_validated_at, 
    'validated_by', p_validated_by, 
    'validation_notes', p_validation_notes, 
    'created_by', p_created_by
  );
  
  -- ------------------------------------------------------
  -- Persist
  -- ------------------------------------------------------
 
  INSERT INTO norpac_commons.address (
    id_rt_address_status, 
    address_line1, 
    address_line2, 
    locality, 
    admin_area_level1, 
    admin_area_level2, 
    postal_code, 
    country_code, 
    latitude, 
    longitude, 
    validated_at, 
    validated_by, 
    validation_notes, 
    created_by,
    updated_by
  )
  VALUES (
    p_id_rt_address_status, 
    p_address_line1, 
    p_address_line2, 
    p_locality, 
    p_admin_area_level1, 
    p_admin_area_level2, 
    p_postal_code, 
    p_country_code, 
    p_latitude, 
    p_longitude, 
    p_validated_at, 
    p_validated_by, 
    p_validation_notes, 
    p_created_by,
    p_created_by
  )
  RETURNING id, updated_at INTO v_id, v_updated_at;

  v_response := (
    'OK',
    jsonb_build_object('id', v_id, 'updated_at', v_updated_at), 
    NULL, 
    '00000',
    'Insert was successful', 
    NULL, 
    NULL
  );
  RETURN v_response;

  -- ------------------------------------------------------
  -- Exceptions
  -- ------------------------------------------------------
  
  EXCEPTION
    WHEN UNIQUE_VIOLATION THEN
      v_response := (
        'ERROR', 
        NULL, 
        jsonb_build_object('type', 'database', 'message', 'A UNIQUE constraint was violated due to duplicate data'), 
        '23514', 
        'A UNIQUE constraint was violated due to duplicate data', 
        'A record already exists in the address table', 
        'Check the provided data and try again'
      );
      CALL norpac_commons.i_logs(v_response.status, v_response.message, c_service_name, p_created_by, v_metadata);
      RETURN v_response;
  
    WHEN OTHERS THEN
      v_response := (
        'ERROR', 
        NULL, 
        jsonb_build_object('type', 'database', 'message', SQLERRM), 
        SQLSTATE, 
        'An unexpected error occurred', 
        'Check database logs for more details', 
        SQLERRM
      );
      CALL norpac_commons.i_logs(v_response.status, v_response.message, c_service_name, p_created_by, v_metadata);
      RETURN v_response;
  
END;
$$ LANGUAGE plpgsql;
