-- ---------------------------------------------------------------------------------------
-- Insert: norpac_commons.address_region. Generated by Pareto Factoryâ„¢ "Be Consistent"
-- ---------------------------------------------------------------------------------------

DROP FUNCTION IF EXISTS norpac_commons.i_address_region;
CREATE FUNCTION norpac_commons.i_address_region(
  IN p_id_address UUID, 
  IN p_id_region UUID
)
RETURNS norpac_commons.pg_resp
AS $$
DECLARE

  c_service_name TEXT := 'i_address_region';

  v_metadata     JSONB := '{}'::JSONB;
  v_errors       JSONB := '[]'::JSONB;
  v_val_resp     norpac_commons.pg_val;  
  v_response     norpac_commons.pg_resp;
  
  -- Primary Key Field(s)
  v_id_address uuid := NULL;
  v_id_region uuid := NULL;

BEGIN

  -- ------------------------------------------------------
  -- Metadata
  -- ------------------------------------------------------

  v_metadata := jsonb_build_object(
    'id_address', p_id_address, 
    'id_region', p_id_region
  );
  
  -- ------------------------------------------------------
  -- Persist
  -- ------------------------------------------------------
 
  INSERT INTO norpac_commons.address_region (
    id_address, 
    id_region
  )
  VALUES (
    p_id_address, 
    p_id_region
  )
  RETURNING id_address, id_region INTO v_id_address, v_id_region;

  v_response := (
    'OK',
    jsonb_build_object('id_address', v_id_address, 'id_region', v_id_region), 
    NULL, 
    '00000',
    'Insert was successful', 
    NULL, 
    NULL
  );
  RETURN v_response;

  -- ------------------------------------------------------
  -- Exceptions
  -- ------------------------------------------------------
  
  EXCEPTION
    WHEN UNIQUE_VIOLATION THEN
      v_response := (
        'ERROR', 
        NULL, 
        jsonb_build_object('type', 'database', 'message', 'A UNIQUE constraint was violated due to duplicate data'), 
        '23514', 
        'A UNIQUE constraint was violated due to duplicate data', 
        'A record already exists in the address_region table', 
        'Check the provided data and try again'
      );
      CALL norpac_commons.i_logs(v_response.status, v_response.message, c_service_name, 'unknown', v_metadata);
      RETURN v_response;
  
    WHEN OTHERS THEN
      v_response := (
        'ERROR', 
        NULL, 
        jsonb_build_object('type', 'database', 'message', SQLERRM), 
        SQLSTATE, 
        'An unexpected error occurred', 
        'Check database logs for more details', 
        SQLERRM
      );
      CALL norpac_commons.i_logs(v_response.status, v_response.message, c_service_name, 'unknown', v_metadata);
      RETURN v_response;
  
END;
$$ LANGUAGE plpgsql;
