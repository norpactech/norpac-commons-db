-- ---------------------------------------------------------------------------------------
-- Update: norpac_commons.user_role. Generated by Pareto Factoryâ„¢ "Be Consistent"
-- ---------------------------------------------------------------------------------------
DROP FUNCTION IF EXISTS norpac_commons.u_user_role;
CREATE FUNCTION norpac_commons.u_user_role(
  IN p_id_user UUID, 
  IN p_id_role UUID
)
RETURNS norpac_commons.pg_resp
AS $$
DECLARE

  c_service_name TEXT := 'u_user_role';

  v_metadata     JSONB := '{}'::JSONB;
  v_errors       JSONB := '[]'::JSONB;
  v_val_resp     norpac_commons.pg_val;
  v_response     norpac_commons.pg_resp;

  v_updates      INT;
  v_message      TEXT;
  v_count        INT;
  
  -- Primary Key Field(s)
  v_id_user uuid := p_id_user;
  v_id_role uuid := p_id_role;
  
BEGIN

  -- ------------------------------------------------------
  -- Metadata
  -- ------------------------------------------------------

  v_metadata := jsonb_build_object(
    'id_user', p_id_user, 
    'id_role', p_id_role
  );
  
  -- ------------------------------------------------------
  -- Persist
  -- ------------------------------------------------------

  UPDATE norpac_commons.user_role SET
    id_user = p_id_user, 
    id_role = p_id_role
    WHERE id_user = p_id_user
      AND id_role = p_id_role
    RETURNING id_user, id_role INTO v_id_user, v_id_role;
  
  GET DIAGNOSTICS v_updates = ROW_COUNT;

  IF v_updates > 0 THEN
    -- Record was updated
    v_response := (
      'OK', 
      jsonb_build_object('id_user', v_id_user, 'id_role', v_id_role), 
      NULL, 
      '00000',
      'Update was successful', 
      NULL, 
      NULL
  );    
  ELSE  
      -- Record does not exist
      v_response := (
        'ERROR', 
        NULL, 
        NULL, 
        '00002',
        'No records were found matching the query.',
        'Check the query parameters or ensure data exists.',
        'The requested resource does not exist in the database.'          
      );
      CALL norpac_commons.i_logs(v_response.status, v_response.message, c_service_name, 'unknown', v_metadata);
 END IF;    

  RETURN v_response;

  -- ------------------------------------------------------
  -- Exceptions
  -- ------------------------------------------------------
  
  EXCEPTION
    WHEN OTHERS THEN
      v_response := (
        'ERROR', 
        NULL, 
        NULL, 
        SQLSTATE, 
        'An unexpected error occurred', 
        'Check database logs for more details', 
        SQLERRM
      );
      CALL norpac_commons.i_logs(v_response.status, v_response.message, c_service_name, 'unknown', v_metadata);
      RETURN v_response;
  
END;
$$ LANGUAGE plpgsql;
